import { Observable, ReplaySubject } from 'rxjs';
import { LoginProvider } from './entities/login-provider';
import { SocialUser } from './entities/user';
import * as ɵngcc0 from '@angular/core';
export interface AuthServiceConfigItem {
    id: string;
    provider: LoginProvider;
    /**
     * This field allows to load login providers SDKs lazily.
     * Lazy loading is activated if it's true and vice versa.
     */
    lazyLoad?: boolean;
}
export interface LoginOpt {
    /**
     * Facebook FB.login options: https://developers.facebook.com/docs/reference/javascript/FB.login/v2.11.
     */
    auth_type?: string;
    scope?: string;
    return_scopes?: boolean;
    enable_profile_selector?: boolean;
    profile_selector_ids?: string;
    /**
     * Google gapi.auth2.ClientConfig: \
     * https://developers.google.com/api-client-library/javascript/reference/referencedocs#gapiauth2clientconfig.
     */
    client_id?: string;
    cookie_policy?: string;
    fetch_basic_profile?: boolean;
    hosted_domain?: string;
    openid_realm?: string;
    ux_mode?: string;
    redirect_uri?: string;
    offline_access?: boolean;
    prompt?: string;
    login_hint?: string;
}
export declare class AuthServiceConfig {
    lazyLoad: boolean;
    providers: Map<string, LoginProvider>;
    _ready: ReplaySubject<any>;
    constructor(providers: AuthServiceConfigItem[] | Observable<AuthServiceConfigItem[]>);
    initialize(providers: AuthServiceConfigItem[]): void;
}
export declare class AuthService {
    private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND;
    private static readonly ERR_NOT_LOGGED_IN;
    private providers;
    private _user;
    private _authState;
    private _readyState;
    private initialized;
    get authState(): Observable<SocialUser>;
    /** Provides an array of provider ID's as they become ready */
    get readyState(): Observable<string[]>;
    constructor(config: AuthServiceConfig);
    private initialize;
    signIn(providerId: string, opt?: LoginOpt): Promise<SocialUser>;
    signOut(revoke?: boolean): Promise<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AuthService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AuthService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImF1dGguc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IExvZ2luUHJvdmlkZXIgfSBmcm9tICcuL2VudGl0aWVzL2xvZ2luLXByb3ZpZGVyJztcclxuaW1wb3J0IHsgU29jaWFsVXNlciB9IGZyb20gJy4vZW50aXRpZXMvdXNlcic7XHJcbmV4cG9ydCBpbnRlcmZhY2UgQXV0aFNlcnZpY2VDb25maWdJdGVtIHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICBwcm92aWRlcjogTG9naW5Qcm92aWRlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmaWVsZCBhbGxvd3MgdG8gbG9hZCBsb2dpbiBwcm92aWRlcnMgU0RLcyBsYXppbHkuXHJcbiAgICAgKiBMYXp5IGxvYWRpbmcgaXMgYWN0aXZhdGVkIGlmIGl0J3MgdHJ1ZSBhbmQgdmljZSB2ZXJzYS5cclxuICAgICAqL1xyXG4gICAgbGF6eUxvYWQ/OiBib29sZWFuO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9naW5PcHQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGYWNlYm9vayBGQi5sb2dpbiBvcHRpb25zOiBodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2RvY3MvcmVmZXJlbmNlL2phdmFzY3JpcHQvRkIubG9naW4vdjIuMTEuXHJcbiAgICAgKi9cclxuICAgIGF1dGhfdHlwZT86IHN0cmluZztcclxuICAgIHNjb3BlPzogc3RyaW5nO1xyXG4gICAgcmV0dXJuX3Njb3Blcz86IGJvb2xlYW47XHJcbiAgICBlbmFibGVfcHJvZmlsZV9zZWxlY3Rvcj86IGJvb2xlYW47XHJcbiAgICBwcm9maWxlX3NlbGVjdG9yX2lkcz86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogR29vZ2xlIGdhcGkuYXV0aDIuQ2xpZW50Q29uZmlnOiBcXFxyXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYXBpLWNsaWVudC1saWJyYXJ5L2phdmFzY3JpcHQvcmVmZXJlbmNlL3JlZmVyZW5jZWRvY3MjZ2FwaWF1dGgyY2xpZW50Y29uZmlnLlxyXG4gICAgICovXHJcbiAgICBjbGllbnRfaWQ/OiBzdHJpbmc7XHJcbiAgICBjb29raWVfcG9saWN5Pzogc3RyaW5nO1xyXG4gICAgZmV0Y2hfYmFzaWNfcHJvZmlsZT86IGJvb2xlYW47XHJcbiAgICBob3N0ZWRfZG9tYWluPzogc3RyaW5nO1xyXG4gICAgb3BlbmlkX3JlYWxtPzogc3RyaW5nO1xyXG4gICAgdXhfbW9kZT86IHN0cmluZztcclxuICAgIHJlZGlyZWN0X3VyaT86IHN0cmluZztcclxuICAgIG9mZmxpbmVfYWNjZXNzPzogYm9vbGVhbjtcclxuICAgIHByb21wdD86IHN0cmluZztcclxuICAgIGxvZ2luX2hpbnQ/OiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQXV0aFNlcnZpY2VDb25maWcge1xyXG4gICAgbGF6eUxvYWQ6IGJvb2xlYW47XHJcbiAgICBwcm92aWRlcnM6IE1hcDxzdHJpbmcsIExvZ2luUHJvdmlkZXI+O1xyXG4gICAgX3JlYWR5OiBSZXBsYXlTdWJqZWN0PGFueT47XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm92aWRlcnM6IEF1dGhTZXJ2aWNlQ29uZmlnSXRlbVtdIHwgT2JzZXJ2YWJsZTxBdXRoU2VydmljZUNvbmZpZ0l0ZW1bXT4pO1xyXG4gICAgaW5pdGlhbGl6ZShwcm92aWRlcnM6IEF1dGhTZXJ2aWNlQ29uZmlnSXRlbVtdKTogdm9pZDtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdXRoU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBFUlJfTE9HSU5fUFJPVklERVJfTk9UX0ZPVU5EO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVJSX05PVF9MT0dHRURfSU47XHJcbiAgICBwcml2YXRlIHByb3ZpZGVycztcclxuICAgIHByaXZhdGUgX3VzZXI7XHJcbiAgICBwcml2YXRlIF9hdXRoU3RhdGU7XHJcbiAgICBwcml2YXRlIF9yZWFkeVN0YXRlO1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZDtcclxuICAgIGdldCBhdXRoU3RhdGUoKTogT2JzZXJ2YWJsZTxTb2NpYWxVc2VyPjtcclxuICAgIC8qKiBQcm92aWRlcyBhbiBhcnJheSBvZiBwcm92aWRlciBJRCdzIGFzIHRoZXkgYmVjb21lIHJlYWR5ICovXHJcbiAgICBnZXQgcmVhZHlTdGF0ZSgpOiBPYnNlcnZhYmxlPHN0cmluZ1tdPjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQXV0aFNlcnZpY2VDb25maWcpO1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplO1xyXG4gICAgc2lnbkluKHByb3ZpZGVySWQ6IHN0cmluZywgb3B0PzogTG9naW5PcHQpOiBQcm9taXNlPFNvY2lhbFVzZXI+O1xyXG4gICAgc2lnbk91dChyZXZva2U/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+O1xyXG59XHJcbiJdfQ==